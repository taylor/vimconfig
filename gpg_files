" augroup encrypted
" au!
" autocmd BufReadPre,FileReadPre *.gpg,*.asc set viminfo=
" autocmd BufReadPre,FileReadPre *.gpg,*.asc set noswapfile
" autocmd BufReadPre,FileReadPre *.gpg set bin
" autocmd BufReadPre,FileReadPre *.gpg,*.asc let ch_save = &ch|set ch=2
" 
" autocmd BufReadPost,FileReadPost *.gpg,*.asc '[,']!sh -c 'gpg --decrypt 2> /dev/null'
" autocmd BufReadPost,FileReadPost *.gpg set nobin
" autocmd BufReadPost,FileReadPost *.gpg,*.asc let &ch = ch_save|unlet ch_save
" autocmd BufReadPost,FileReadPost *.gpg,*.asc execute ":doautocmd BufReadPost " . expand("%:r")
" 
" " autocmd BufWritePre,FileWritePre pass.gpg '[,']!sh -c 'gpg
" " - --default-recipient-self -r chris@hippiehacker.org -e 2>/dev/null'
" " autocmd BufWritePre,FileWritePre pass.asc '[,']!sh -c 'gpg
" " - --default-recipient-self -r chris@hippiehacker.org -e -a 2>/dev/null'
" 
" autocmd BufWritePre,FileWritePre *.gpg '[,']!sh -c 'gpg - --default-recipient-self -e 2>/dev/null'
" autocmd BufWritePre,FileWritePre *.asc '[,']!sh -c 'gpg - --default-recipient-self -ae 2>/dev/null'
" 
" autocmd BufWritePost,FileWritePost *.gpg,*.asc u
" augroup END

" augroup GPGASCII
"   au!
"   au BufReadPost *.asc :%!gpg -q -d
"   au BufReadPost *.asc |redraw
"   au BufWritePre *.asc :%!gpg -q -r taylor@codecafe.com -ae
"   au BufWritePost *.asc u
"   au VimLeave *.asc :!clear
" augroup END

" Transparent editing of gpg encrypted files.
" Placed Public Domain by Wouter Hanegraaff
" (asc support and sh -c"..." added by Osamu Aoki)
augroup aencrypted
  au!
  " First make sure nothing is written to ~/.viminfo while editing
  " an encrypted file.
  autocmd BufReadPre,FileReadPre *.asc set viminfo=
  " We don't want a swap file, as it writes unencrypted data to disk
  autocmd BufReadPre,FileReadPre *.asc set noswapfile
  " Switch to binary mode to read the encrypted file
  autocmd BufReadPre,FileReadPre *.asc set bin
  autocmd BufReadPre,FileReadPre *.asc let ch_save = &ch|set ch=2
  autocmd BufReadPost,FileReadPost *.asc '[,']!sh -c "gpg --decrypt 2> /dev/null"
  " Switch to normal mode for editing
  autocmd BufReadPost,FileReadPost *.asc set nobin
  autocmd BufReadPost,FileReadPost *.asc let &ch = ch_save|unlet ch_save
  autocmd BufReadPost,FileReadPost *.asc execute ":doautocmd BufReadPost " . expand("%:r")

  " Convert all text to encrypted text before writing
  autocmd BufWriteCmd,FileWriteCmd *.asc '[,']!sh -c "gpg --default-recipient-self -ae 2> /dev/null"
  "autocmd BufWriteCmd,FileWriteCmd *.asc u

  "autocmd BufWriteCmd,FileWriteCmd *.asc execute "'[,']!sh -c \"gpg --default-recipient-self -ae 2> /dev/null\"" | u

  " autocmd BufWritePre,FileWritePre *.asc '[,']!sh -c "gpg --default-recipient-self -ae > 2>/dev/null"
  " Undo the encryption so we are back in the normal text, directly
  " after the file has been written.
  autocmd BufWritePost,FileWritePost *.asc u
augroup END
augroup bencrypted
  au!
  " First make sure nothing is written to ~/.viminfo while editing
  " an encrypted file.
  autocmd BufReadPre,FileReadPre *.gpg set viminfo=
  " We don't want a swap file, as it writes unencrypted data to disk
  autocmd BufReadPre,FileReadPre *.gpg set noswapfile
  " Switch to binary mode to read the encrypted file
  autocmd BufReadPre,FileReadPre *.gpg set bin
  autocmd BufReadPre,FileReadPre *.gpg let ch_save = &ch|set ch=2
  autocmd BufReadPost,FileReadPost *.gpg '[,']!sh -c "gpg --decrypt 2> /dev/null"
  " Switch to normal mode for editing
  autocmd BufReadPost,FileReadPost *.gpg set nobin
  autocmd BufReadPost,FileReadPost *.gpg let &ch = ch_save|unlet ch_save
  autocmd BufReadPost,FileReadPost *.gpg execute ":doautocmd BufReadPost " . expand("%:r")

  " Convert all text to encrypted text before writing
  autocmd BufWriteCmd,FileWriteCmd *.gpg '[,']!sh -c "gpg --default-recipient-self -e 2>/dev/null"
  autocmd BufWritePre,FileWritePre *.gpg '[,']!sh -c "gpg --default-recipient-self -e 2>/dev/null"
  " Undo the encryption so we are back in the normal text, directly
  " after the file has been written.
  autocmd BufWritePost,FileWritePost *.gpg u
augroup END
